#include "network.hpp"

/////////////////////////////////////////////////////////////////////////
//Network BRand()
//@DESCRIPTION: generates a random 0 or 1.
//@PARAMS:
// - none
//@RETURN:
// - void
/////////////////////////////////////////////////////////////////////////
int Network::BRand()
{
	return rand()%2;
}

/////////////////////////////////////////////////////////////////////////
//Network DRand()
//@DESCRIPTION: generates a random double number bwetween min and max.
//@PARAMS:
// - double min: minimum number in the generating interval
// - double max: maximum number in the generating interval
//@RETURN:
// - double
/////////////////////////////////////////////////////////////////////////
double Network::DRand(double min, double max)
{
	double ret = (double)rand()/RAND_MAX;
	return (min+(ret*(max-min)));
}

/////////////////////////////////////////////////////////////////////////
//Network Learn_pattern()
//@DESCRIPTION: trains the network to learn a certain pattern fed to it.
//@PARAMS:
// - none
//@RETURN:
// - void
/////////////////////////////////////////////////////////////////////////
Network::Learn_pattern()
{

}
/////////////////////////////////////////////////////////////////////////
//Network Anneal()
//@DESCRIPTION: trains the network to learn a certain pattern fed to it.
//@PARAMS:
// - none
//@RETURN:
// - void
/////////////////////////////////////////////////////////////////////////
Network::Anneal()
{

}

/////////////////////////////////////////////////////////////////////////
//Network Recall_pattern()
//@DESCRIPTION: probes the network to remember a certain pattern that is
//fed to it.
//@PARAMS:
// - none
//@RETURN:
// - void
/////////////////////////////////////////////////////////////////////////
Network::Recall_pattern()
{

}


/////////////////////////////////////////////////////////////////////////
//Network Adjust_weights()
//@DESCRIPTION: probes the network to remember a certain pattern that is
//fed to it.
//@PARAMS:
// - none
//@RETURN:
// - void
/////////////////////////////////////////////////////////////////////////
Network::Adjust_weights()
{

}


/////////////////////////////////////////////////////////////////////////
//Network Sweep_probe()
//@DESCRIPTION: sweeps the whole network (units),probing the units if 
//they'll change their states, based on their energy gap.
//@PARAMS:
// - none
//@RETURN:
// - void
/////////////////////////////////////////////////////////////////////////
Network::Sweep_probe()
{

}






//TODO: implement all network functions
